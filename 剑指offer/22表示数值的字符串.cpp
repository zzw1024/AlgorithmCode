//#include "head.h"
//
//class Solution {
//public:
//	bool isNumeric(char* string)
//	{
//		if (string == nullptr)return false;
//
//		bool numeric = scanInteger(&string);
//
//		// 如果出现'.'，接下来是数字的小数部分
//		if (*string == '.')
//		{
//			++string;
//
//			// 下面一行代码用||的原因：
//			// 1. 小数可以没有整数部分，例如.123等于0.123；
//			// 2. 小数点后面可以没有数字，例如233.等于233.0；
//			// 3. 当然小数点前面和后面可以有数字，例如233.666
//			numeric = scanUnsignedInteger(&string) || numeric;
//		}
//
//		// 如果出现'e'或者'E'，接下来跟着的是数字的指数部分
//		if (*string == 'e' || *string == 'E')
//		{
//			++string;
//
//			// 下面一行代码用&&的原因：
//			// 1. 当e或E前面没有数字时，整个字符串不能表示数字，例如.e1、e1；
//			// 2. 当e或E后面没有整数时，整个字符串不能表示数字，例如12e、12e+5.4
//			numeric = numeric && scanInteger(&string);
//		}
//
//		return numeric && *string == '\0';
//	}
//
//	bool scanUnsignedInteger(char** str)
//	{
//		const char* before = *str;
//		while (**str != '\0' && **str >= '0' && **str <= '9')
//			++(*str);
//
//		// 当str中存在若干0-9的数字时，返回true
//		return *str > before;
//	}
//
//	// 整数的格式可以用[+|-]B表示, 其中B为无符号整数
//	bool scanInteger(char** str)
//	{
//		if (**str == '+' || **str == '-')
//			++(*str);
//		return scanUnsignedInteger(str);
//	}
//};
//
//
//int main()
//{
//	int a = 0;
//}